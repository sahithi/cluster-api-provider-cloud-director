#cloud-config
# NOTE: do not change the position of the secret in the following file as secretes need to be redacted.
write_files:
- path: /root/vcloud-basic-auth.yaml
  owner: root
  content: |
    ---
    apiVersion: v1
    data:
      username: "%s"
      password: "%s"
      refreshToken: "%s"
    kind: Secret
    metadata:
      name: vcloud-basic-auth
      namespace: kube-system
    ---
- path: /root/default-storage-class.yaml
  owner: root
  content: |
    ---
    kind: StorageClass
    apiVersion: storage.k8s.io/v1
    metadata:
      annotations:
        storageclass.kubernetes.io/is-default-class: "true"
      name: "%s"
    provisioner: named-disk.csi.cloud-director.vmware.com
    reclaimPolicy: "%s"
    parameters:
      storageProfile: "%s"
      filesystem: "%s"
    ---
- path: /root/control_plane.sh
  owner: root
  content: |
    #!/usr/bin/env bash
    catch() {
      retval=$?
       error_message="$(date) $(caller): $BASH_COMMAND"
       echo "$error_message" &>> /var/log/capvcd/customization/error.log
       vmtoolsd --cmd "info-set guestinfo.post_customization_script_execution_failure_reason $error_message"
       vmtoolsd --cmd "info-set guestinfo.post_customization_script_execution_status $retval"

       cloud_init_output=""
       if [[ -f /var/log/cloud-init-output.log ]]
       then
         cloud_init_output=$(</var/log/cloud-init-output.log)
       fi
       vmtoolsd --cmd "info-set guestinfo.post_customization_cloud_init_output $cloud_init_output"
    }
    mkdir -p /var/log/capvcd/customization
    trap 'catch $? $LINENO' ERR EXIT
    set -ex
    echo "$(date) Post Customization script execution in progress" &>> /var/log/capvcd/customization/status.log
    vcloud_basic_auth_path=/root/vcloud-basic-auth.yaml
    vcloud_configmap_path=/root/vcloud-configmap.yaml
    vcloud_ccm_path=/root/cloud-director-ccm.yaml
    vcloud_csi_configmap_path=/root/vcloud-csi-configmap.yaml
    csi_driver_path=/root/csi-driver.yaml
    csi_controller_path=/root/csi-controller.yaml
    csi_node_path=/root/csi-node.yaml

    vmtoolsd --cmd "info-set guestinfo.postcustomization.networkconfiguration.status in_progress"
      echo 'net.ipv6.conf.all.disable_ipv6 = 1' >> /etc/sysctl.conf
      echo 'net.ipv6.conf.default.disable_ipv6 = 1' >> /etc/sysctl.conf
      echo 'net.ipv6.conf.lo.disable_ipv6 = 1' >> /etc/sysctl.conf
      sudo sysctl -p
      # also remove ipv6 localhost entry from /etc/hosts
      sed -i 's/::1/127.0.0.1/g' /etc/hosts || true
    vmtoolsd --cmd "info-set guestinfo.postcustomization.networkconfiguration.status successful"

    vmtoolsd --cmd "info-set guestinfo.postcustomization.kubeinit.status in_progress"
      for image in "coredns" "etcd" "kube-proxy" "kube-apiserver" "kube-controller-manager" "kube-scheduler"
      do
        image_ref=$(ctr -n=k8s.io image list | cut -d" " -f1 | grep $image)
        ref_path=$(echo $image_ref | sed 's/:.*//')
        new_tag_version=$(echo $image_ref | sed 's/.*://' | sed 's/_/-/')
        ctr -n=k8s.io image tag $image_ref $ref_path:$new_tag_version
      done
      __JINJA_RUNCMD_REPLACE_ME__
      if [[ ! -f /run/cluster-api/bootstrap-success.complete ]]
      then
          echo "file /run/cluster-api/bootstrap-success.complete not found" &>> /var/log/capvcd/customization/error.log
          exit 1
      fi
      export KUBECONFIG=/etc/kubernetes/admin.conf
      kubectl get po -A -owide
    vmtoolsd --cmd "info-set guestinfo.kubeconfig $(cat /etc/kubernetes/admin.conf | base64 | tr -d '\n')"
    vmtoolsd --cmd "info-set guestinfo.postcustomization.kubeinit.status successful"

    antrea_version=%s
    vmtoolsd --cmd "info-set guestinfo.postcustomization.tkr.get_versions.status in_progress"
      if [[ -z "$antrea_version" ]]; then
        tkr_bom_dir=/tmp/tkr_bom
        mkdir $tkr_bom_dir
        bom_path=$tkr_bom_dir/bom
        mkdir $bom_path
        components_path=$bom_path/components.yaml
        imgpkg_path=$tkr_bom_dir/imgpkg
        yq_path=$tkr_bom_dir/yq
        default_antrea_version="0.11.3"

        xml_version_property=$(vmtoolsd --cmd "info-get guestinfo.ovfenv" | grep "oe:key=\"VERSION\"")
        init_k8s_version=$(echo $xml_version_property | sed 's/.*oe:value=\"//; s/\(.*\)-.*/\1/')
        k8s_version=$(echo ${init_k8s_version} | tr -s "+" "_")

        # install imgpkg, which is needed for getting the components yaml file
        wget -nv github.com/vmware-tanzu/carvel-imgpkg/releases/download/v0.24.0/imgpkg-linux-amd64 -O $imgpkg_path
        chmod +x $imgpkg_path

        # We need to loop through the `X` value in `tkg.X` because of some TKR unexpected design.
        # We increment `X`, looking fir a valid tkr bom version.
        no_tkr_found=false
        until $imgpkg_path pull -i projects.registry.vmware.com/tkg/tkr-bom:${k8s_version} -o $bom_path
        do
          tkg_version=$(echo ${k8s_version//*.})
          tkg_version=$((tkg_version+1))
          k8s_version=$(echo ${k8s_version} | sed "s/.$/"$tkg_version"/")
          if [[ $tkg_version -gt 10 ]]; then
            no_tkr_found=true
            break
          fi
        done

        if [[ "$no_tkr_found" = true ]] ; then
          echo "no tkr bom found, will use default component versions"  &>> /var/log/capvcd/customization/status.log
          antrea_version=$default_antrea_version
        fi

        if [[ "$no_tkr_found" = false ]]; then
          mv $bom_path/*.yaml $components_path

          # install yq for yaml parsing
          wget https://github.com/mikefarah/yq/releases/download/v4.2.0/yq_linux_amd64 -O $yq_path
          chmod +x $yq_path
          antrea_version=$($yq_path e ".components.antrea[0].version" $components_path | sed 's/+.*//')
          if [[ -z "$antrea_version" ]] || [[ "$antrea_version" = "null" ]] || [[ "$antrea_version" = "false" ]]; then
            antrea_version=$default_antrea_version
            echo "no antrea version found in tkr bom, will use default antrea version: ${default_antrea_version}" &>> /var/log/capvcd/customization/status.log
          else
            antrea_version=$(echo ${antrea_version} | sed "s/v//") # remove leading `v`, which will be added later
          fi
        fi

        # cleanup components downloads
        rm -rf $tkr_bom_dir
      fi
    vmtoolsd --cmd "info-set guestinfo.postcustomization.tkr.get_versions.status successful"

    vmtoolsd --cmd "info-set guestinfo.postcustomization.kubectl.cni.install.status in_progress"
      antrea_path=/root/antrea-v$antrea_version.yaml
      wget -O $antrea_path https://github.com/vmware-tanzu/antrea/releases/download/v$antrea_version/antrea.yml
      # This does not need to be done from v0.12.0 onwards inclusive
      sed -i "s/image: antrea\/antrea-ubuntu:v$antrea_version/image: projects.registry.vmware.com\/antrea\/antrea-ubuntu:v$antrea_version/g" $antrea_path
      kubectl apply -f $antrea_path
    vmtoolsd --cmd "info-set guestinfo.postcustomization.kubectl.cni.install.status successful"

    vmtoolsd --cmd "info-set guestinfo.postcustomization.kubectl.cpi.install.status in_progress"
      kubectl apply -f $vcloud_basic_auth_path
      cpi_version=%s
      wget -O $vcloud_configmap_path https://raw.githubusercontent.com/vmware/cloud-provider-for-cloud-director/$cpi_version/manifests/vcloud-configmap.yaml
      sed -i 's/VCD_HOST/"%s"/' $vcloud_configmap_path
      sed -i 's/ORG/"%s"/' $vcloud_configmap_path
      sed -i 's/OVDC/"%s"/' $vcloud_configmap_path
      sed -i 's/NETWORK/"%s"/' $vcloud_configmap_path
      sed -i 's/VIP_SUBNET_CIDR/"%s"/' $vcloud_configmap_path
      sed -i 's/VAPP/%s/' $vcloud_configmap_path
      sed -i 's/CLUSTER_ID/%s/' $vcloud_configmap_path
      kubectl apply -f $vcloud_configmap_path
      wget -O $vcloud_ccm_path https://raw.githubusercontent.com/vmware/cloud-provider-for-cloud-director/$cpi_version/manifests/cloud-director-ccm.yaml
      kubectl apply -f $vcloud_ccm_path
    vmtoolsd --cmd "info-set guestinfo.postcustomization.kubectl.cpi.install.status successful"

    vmtoolsd --cmd "info-set guestinfo.postcustomization.kubectl.csi.install.status in_progress"
      csi_version=%s
      wget -O $vcloud_csi_configmap_path https://raw.githubusercontent.com/vmware/cloud-director-named-disk-csi-driver/$csi_version/manifests/vcloud-csi-config.yaml
      sed -i 's/VCD_HOST/"%s"/' $vcloud_csi_configmap_path
      sed -i 's/ORG/"%s"/' $vcloud_csi_configmap_path
      sed -i 's/OVDC/"%s"/' $vcloud_csi_configmap_path
      sed -i 's/VAPP/%s/' $vcloud_csi_configmap_path
      sed -i 's/CLUSTER_ID/"%s"/' $vcloud_csi_configmap_path
      kubectl apply -f $vcloud_csi_configmap_path
      wget -O $csi_driver_path https://raw.githubusercontent.com/vmware/cloud-director-named-disk-csi-driver/$csi_version/manifests/csi-driver.yaml
      wget -O $csi_controller_path https://raw.githubusercontent.com/vmware/cloud-director-named-disk-csi-driver/$csi_version/manifests/csi-controller.yaml
      wget -O $csi_node_path https://raw.githubusercontent.com/vmware/cloud-director-named-disk-csi-driver/$csi_version/manifests/csi-node.yaml
      kubectl apply -f $csi_driver_path
      kubectl apply -f $csi_controller_path
      kubectl apply -f $csi_node_path
    vmtoolsd --cmd "info-set guestinfo.postcustomization.kubectl.csi.install.status successful"

    vmtoolsd --cmd "info-set guestinfo.postcustomization.kubeadm.token.generate.status in_progress"
      kubeadm_join_info=$(kubeadm token create --print-join-command 2> /dev/null)
      vmtoolsd --cmd "info-set guestinfo.postcustomization.kubeadm.token.info $kubeadm_join_info"
    vmtoolsd --cmd "info-set guestinfo.postcustomization.kubeadm.token.generate.status successful"

    vmtoolsd --cmd "info-set guestinfo.postcustomization.kubectl.default_storage_class.install.status in_progress"
    storage_class_enabled=%s
    if [[ "$storage_class_enabled" == "true" ]]; then
      kubectl apply -f /root/default-storage-class.yaml
    fi
    vmtoolsd --cmd "info-set guestinfo.postcustomization.kubectl.default_storage_class.install.status successful"

    echo "$(date) post customization script execution completed" &>> /var/log/capvcd/customization/status.log
    exit 0
runcmd:
- '[ ! -f /root/vcloud-basic-auth.yaml ] && cloud-init clean && sudo reboot'
- '[ ! -f /root/control_plane.sh ] && cloud-init clean && sudo reboot'
# Only checking if /run/kubeadm/kubeadm.yaml as it is the main file needed for kubeadm init.
# Ignoring checks for .cert and .key files
- '[ ! -f /run/kubeadm/kubeadm.yaml ] && cloud-init clean && sudo reboot'
- bash /root/control_plane.sh
timezone: UTC
disable_root: false
preserve_hostname: false
hostname: "%s"
final_message: "The system is ready after $UPTIME seconds"
